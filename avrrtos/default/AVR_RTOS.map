Archive member included because of file (symbol)

/usr/lib/gcc/avr/4.3.5/avr4/libgcc.a(_exit.o)
                              /usr/lib/gcc/avr/4.3.5/../../../avr/lib/avr4/crtm8.o (exit)
/usr/lib/gcc/avr/4.3.5/avr4/libgcc.a(_clear_bss.o)
                              AVR_RTOS.o (__do_clear_bss)

Allocating common symbols
Common symbol       size              file

Stack3              0x20              test.o
OSIdleCtr           0x4               AVR_RTOS.o
TCB                 0x10              AVR_RTOS.o
Stack2              0x20              test.o
Stack1              0x20              test.o
IdleStack           0x20              AVR_RTOS.o
Sem                 0x2               test.o

Memory Configuration

Name             Origin             Length             Attributes
text             0x00000000         0x00002000         xr
data             0x00800060         0x0000ffa0         rw !x
eeprom           0x00810000         0x00010000         rw !x
fuse             0x00820000         0x00000400         rw !x
lock             0x00830000         0x00000400         rw !x
signature        0x00840000         0x00000400         rw !x
*default*        0x00000000         0xffffffff

Linker script and memory map

LOAD /usr/lib/gcc/avr/4.3.5/../../../avr/lib/avr4/crtm8.o
LOAD AVR_RTOS.o
LOAD test.o
LOAD /usr/lib/gcc/avr/4.3.5/avr4/libgcc.a
LOAD /usr/lib/gcc/avr/4.3.5/../../../avr/lib/avr4/libc.a
LOAD /usr/lib/gcc/avr/4.3.5/avr4/libgcc.a

.hash
 *(.hash)

.dynsym
 *(.dynsym)

.dynstr
 *(.dynstr)

.gnu.version
 *(.gnu.version)

.gnu.version_d
 *(.gnu.version_d)

.gnu.version_r
 *(.gnu.version_r)

.rel.init
 *(.rel.init)

.rela.init
 *(.rela.init)

.rel.text
 *(.rel.text)
 *(.rel.text.*)
 *(.rel.gnu.linkonce.t*)

.rela.text
 *(.rela.text)
 *(.rela.text.*)
 *(.rela.gnu.linkonce.t*)

.rel.fini
 *(.rel.fini)

.rela.fini
 *(.rela.fini)

.rel.rodata
 *(.rel.rodata)
 *(.rel.rodata.*)
 *(.rel.gnu.linkonce.r*)

.rela.rodata
 *(.rela.rodata)
 *(.rela.rodata.*)
 *(.rela.gnu.linkonce.r*)

.rel.data
 *(.rel.data)
 *(.rel.data.*)
 *(.rel.gnu.linkonce.d*)

.rela.data
 *(.rela.data)
 *(.rela.data.*)
 *(.rela.gnu.linkonce.d*)

.rel.ctors
 *(.rel.ctors)

.rela.ctors
 *(.rela.ctors)

.rel.dtors
 *(.rel.dtors)

.rela.dtors
 *(.rela.dtors)

.rel.got
 *(.rel.got)

.rela.got
 *(.rela.got)

.rel.bss
 *(.rel.bss)

.rela.bss
 *(.rela.bss)

.rel.plt
 *(.rel.plt)

.rela.plt
 *(.rela.plt)

.text           0x00000000      0x5a8
 *(.vectors)
 .vectors       0x00000000       0x26 /usr/lib/gcc/avr/4.3.5/../../../avr/lib/avr4/crtm8.o
                0x00000000                __vectors
                0x00000000                __vector_default
 *(.vectors)
 *(.progmem.gcc*)
 *(.progmem*)
                0x00000026                . = ALIGN (0x2)
                0x00000026                __trampolines_start = .
 *(.trampolines)
 .trampolines   0x00000026        0x0 linker stubs
 *(.trampolines*)
                0x00000026                __trampolines_end = .
 *(.jumptables)
 *(.jumptables*)
 *(.lowtext)
 *(.lowtext*)
                0x00000026                __ctors_start = .
 *(.ctors)
                0x00000026                __ctors_end = .
                0x00000026                __dtors_start = .
 *(.dtors)
                0x00000026                __dtors_end = .
 SORT(*)(.ctors)
 SORT(*)(.dtors)
 *(.init0)
 .init0         0x00000026        0x0 /usr/lib/gcc/avr/4.3.5/../../../avr/lib/avr4/crtm8.o
                0x00000026                __init
 *(.init0)
 *(.init1)
 *(.init1)
 *(.init2)
 .init2         0x00000026        0xc /usr/lib/gcc/avr/4.3.5/../../../avr/lib/avr4/crtm8.o
 *(.init2)
 *(.init3)
 *(.init3)
 *(.init4)
 .init4         0x00000032       0x10 /usr/lib/gcc/avr/4.3.5/avr4/libgcc.a(_clear_bss.o)
                0x00000032                __do_clear_bss
 *(.init4)
 *(.init5)
 *(.init5)
 *(.init6)
 *(.init6)
 *(.init7)
 *(.init7)
 *(.init8)
 *(.init8)
 *(.init9)
 .init9         0x00000042        0x4 /usr/lib/gcc/avr/4.3.5/../../../avr/lib/avr4/crtm8.o
 *(.init9)
 *(.text)
 .text          0x00000046        0x2 /usr/lib/gcc/avr/4.3.5/../../../avr/lib/avr4/crtm8.o
                0x00000046                __vector_1
                0x00000046                __vector_12
                0x00000046                __bad_interrupt
                0x00000046                __vector_6
                0x00000046                __vector_3
                0x00000046                __vector_11
                0x00000046                __vector_13
                0x00000046                __vector_17
                0x00000046                __vector_7
                0x00000046                __vector_5
                0x00000046                __vector_4
                0x00000046                __vector_2
                0x00000046                __vector_15
                0x00000046                __vector_8
                0x00000046                __vector_14
                0x00000046                __vector_10
                0x00000046                __vector_16
                0x00000046                __vector_18
 .text          0x00000048      0x4f2 AVR_RTOS.o
                0x00000048                OSTaskCreate
                0x000000a4                OSInit
                0x000000c8                OSStart
                0x000000e2                OS_TASK_SW
                0x00000168                OSIntCtxSw
                0x00000174                OS_SchedNew
                0x00000192                OS_Sched
                0x000001b0                OSTaskResume
                0x000001f4                OSTaskSuspend
                0x0000023c                IdleTask
                0x00000284                OSIntEnter
                0x0000029c                OSIntExit
                0x000002d0                OSTimeTick
                0x0000031e                OSTimeDly
                0x00000360                OSSemCreate
                0x0000036a                OSSemPend
                0x00000468                OSSemPost
                0x000004d4                TCN0Init
                0x000004e6                __vector_9
                0x00000534                OSTimeTickHook
                0x00000536                OSTaskIdleHook
                0x00000538                OSInitHookBegin
 .text          0x0000053a       0x6a test.o
                0x0000053a                main
                0x00000568                Task2
                0x0000057c                Task1
                0x00000590                Task0
 .text          0x000005a4        0x0 /usr/lib/gcc/avr/4.3.5/avr4/libgcc.a(_exit.o)
 .text          0x000005a4        0x0 /usr/lib/gcc/avr/4.3.5/avr4/libgcc.a(_clear_bss.o)
                0x000005a4                . = ALIGN (0x2)
 *(.text.*)
 .text.libgcc   0x000005a4        0x0 /usr/lib/gcc/avr/4.3.5/avr4/libgcc.a(_exit.o)
 .text.libgcc   0x000005a4        0x0 /usr/lib/gcc/avr/4.3.5/avr4/libgcc.a(_clear_bss.o)
                0x000005a4                . = ALIGN (0x2)
 *(.fini9)
 .fini9         0x000005a4        0x0 /usr/lib/gcc/avr/4.3.5/avr4/libgcc.a(_exit.o)
                0x000005a4                exit
                0x000005a4                _exit
 *(.fini9)
 *(.fini8)
 *(.fini8)
 *(.fini7)
 *(.fini7)
 *(.fini6)
 *(.fini6)
 *(.fini5)
 *(.fini5)
 *(.fini4)
 *(.fini4)
 *(.fini3)
 *(.fini3)
 *(.fini2)
 *(.fini2)
 *(.fini1)
 *(.fini1)
 *(.fini0)
 .fini0         0x000005a4        0x4 /usr/lib/gcc/avr/4.3.5/avr4/libgcc.a(_exit.o)
 *(.fini0)
                0x000005a8                _etext = .

.data           0x00800060        0x0 load address 0x000005a8
                0x00800060                PROVIDE (__data_start, .)
 *(.data)
 .data          0x00800060        0x0 /usr/lib/gcc/avr/4.3.5/../../../avr/lib/avr4/crtm8.o
 .data          0x00800060        0x0 AVR_RTOS.o
 .data          0x00800060        0x0 test.o
 .data          0x00800060        0x0 /usr/lib/gcc/avr/4.3.5/avr4/libgcc.a(_exit.o)
 .data          0x00800060        0x0 /usr/lib/gcc/avr/4.3.5/avr4/libgcc.a(_clear_bss.o)
 *(.data*)
 *(.rodata)
 *(.rodata*)
 *(.gnu.linkonce.d*)
                0x00800060                . = ALIGN (0x2)
                0x00800060                _edata = .
                0x00800060                PROVIDE (__data_end, .)

.bss            0x00800060       0x96
                0x00800060                PROVIDE (__bss_start, .)
 *(.bss)
 .bss           0x00800060        0x0 /usr/lib/gcc/avr/4.3.5/../../../avr/lib/avr4/crtm8.o
 .bss           0x00800060        0x0 AVR_RTOS.o
 .bss           0x00800060        0x0 test.o
 .bss           0x00800060        0x0 /usr/lib/gcc/avr/4.3.5/avr4/libgcc.a(_exit.o)
 .bss           0x00800060        0x0 /usr/lib/gcc/avr/4.3.5/avr4/libgcc.a(_clear_bss.o)
 *(.bss*)
 *(COMMON)
 COMMON         0x00800060       0x34 AVR_RTOS.o
                0x00800060                OSIdleCtr
                0x00800064                TCB
                0x00800074                IdleStack
 COMMON         0x00800094       0x62 test.o
                0x00800094                Stack3
                0x008000b4                Stack2
                0x008000d4                Stack1
                0x008000f4                Sem
                0x008000f6                PROVIDE (__bss_end, .)
                0x000005a8                __data_load_start = LOADADDR (.data)
                0x000005a8                __data_load_end = (__data_load_start + SIZEOF (.data))

.noinit         0x008000f6        0x0
                0x008000f6                PROVIDE (__noinit_start, .)
 *(.noinit*)
                0x008000f6                PROVIDE (__noinit_end, .)
                0x008000f6                _end = .
                0x008000f6                PROVIDE (__heap_start, .)

.eeprom         0x00810000        0x0
 *(.eeprom*)
                0x00810000                __eeprom_end = .

.fuse
 *(.fuse)
 *(.lfuse)
 *(.hfuse)
 *(.efuse)

.lock
 *(.lock*)

.signature
 *(.signature*)

.stab           0x00000000      0x6b4
 *(.stab)
 .stab          0x00000000      0x6b4 /usr/lib/gcc/avr/4.3.5/../../../avr/lib/avr4/crtm8.o

.stabstr        0x00000000       0x54
 *(.stabstr)
 .stabstr       0x00000000       0x54 /usr/lib/gcc/avr/4.3.5/../../../avr/lib/avr4/crtm8.o

.stab.excl
 *(.stab.excl)

.stab.exclstr
 *(.stab.exclstr)

.stab.index
 *(.stab.index)

.stab.indexstr
 *(.stab.indexstr)

.comment
 *(.comment)

.debug
 *(.debug)

.line
 *(.line)

.debug_srcinfo
 *(.debug_srcinfo)

.debug_sfnames
 *(.debug_sfnames)

.debug_aranges  0x00000000       0x40
 *(.debug_aranges)
 .debug_aranges
                0x00000000       0x20 AVR_RTOS.o
 .debug_aranges
                0x00000020       0x20 test.o

.debug_pubnames
                0x00000000      0x2ab
 *(.debug_pubnames)
 .debug_pubnames
                0x00000000      0x1d5 AVR_RTOS.o
 .debug_pubnames
                0x000001d5       0xd6 test.o

.debug_info     0x00000000      0x6ee
 *(.debug_info)
 .debug_info    0x00000000      0x4c7 AVR_RTOS.o
 .debug_info    0x000004c7      0x227 test.o
 *(.gnu.linkonce.wi.*)

.debug_abbrev   0x00000000      0x284
 *(.debug_abbrev)
 .debug_abbrev  0x00000000      0x1bf AVR_RTOS.o
 .debug_abbrev  0x000001bf       0xc5 test.o

.debug_line     0x00000000      0x82c
 *(.debug_line)
 .debug_line    0x00000000      0x71d AVR_RTOS.o
 .debug_line    0x0000071d      0x10f test.o

.debug_frame    0x00000000      0x1c0
 *(.debug_frame)
 .debug_frame   0x00000000      0x170 AVR_RTOS.o
 .debug_frame   0x00000170       0x50 test.o

.debug_str      0x00000000      0x28b
 *(.debug_str)
 .debug_str     0x00000000      0x255 AVR_RTOS.o
                                0x294 (size before relaxing)
 .debug_str     0x00000255       0x36 test.o
                                0x18c (size before relaxing)

.debug_loc      0x00000000      0x288
 *(.debug_loc)
 .debug_loc     0x00000000      0x288 AVR_RTOS.o

.debug_macinfo
 *(.debug_macinfo)
OUTPUT(AVR_RTOS.elf elf32-avr)
LOAD linker stubs

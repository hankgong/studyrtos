
AVR_RTOS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005a8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000096  00800060  00800060  0000061c  2**0
                  ALLOC
  2 .stab         000006b4  00000000  00000000  0000061c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000054  00000000  00000000  00000cd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000040  00000000  00000000  00000d24  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000002ab  00000000  00000000  00000d64  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006ee  00000000  00000000  0000100f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000284  00000000  00000000  000016fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000082c  00000000  00000000  00001981  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c0  00000000  00000000  000021b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028b  00000000  00000000  00002370  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000288  00000000  00000000  000025fb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	69 c2       	rjmp	.+1234   	; 0x4e6 <__vector_9>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	17 c0       	rjmp	.+46     	; 0x46 <__bad_interrupt>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a6 3f       	cpi	r26, 0xF6	; 246
  3e:	b1 07       	cpc	r27, r17
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	7b d2       	rcall	.+1270   	; 0x53a <main>
  44:	af c2       	rjmp	.+1374   	; 0x5a4 <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <OSTaskCreate>:
函数原型：	void OSTaskCreate(void (*Task)(void),INT8U *Stack,INT8U prio)
函数功能：	用户函数，建立任务 
入口参数：	*Task：任务函数地址；*Stack：任务堆栈指针；prio：任务优先级
*********************************************************************************************************/
void OSTaskCreate(void (*Task)(void),INT8U *Stack,INT8U prio)
{
  48:	fb 01       	movw	r30, r22
	INT8U i;
	*Stack--=(INT16U)Task;				     /*将任务的地址低位压入堆栈                                 */
  4a:	80 83       	st	Z, r24
	*Stack--=(INT16U)Task>>8;		 	     /*将任务的地址高位压入堆栈	                                */
  4c:	92 93       	st	-Z, r25
	*Stack--=0x00;							 /*R1 __zero_reg__				                            */
  4e:	12 92       	st	-Z, r1
	*Stack--=0x00;							 /*R0 __tmp_reg__			                                */
  50:	12 92       	st	-Z, r1
	*Stack--=0x80;							 /*SREG 在任务中，开启全局中断	                            */
  52:	80 e8       	ldi	r24, 0x80	; 128
  54:	82 93       	st	-Z, r24
  56:	cf 01       	movw	r24, r30
  58:	01 97       	sbiw	r24, 0x01	; 1
  5a:	fc 01       	movw	r30, r24
  5c:	50 e0       	ldi	r21, 0x00	; 0
	for(i=0;i<14;i++)
    *Stack--=i;/*在 avr-libc 中的 FAQ中的 What registers are used by the C compiler?描述了寄存器的作用	*/
  5e:	50 83       	st	Z, r21
  60:	31 97       	sbiw	r30, 0x01	; 1
	*Stack--=(INT16U)Task;				     /*将任务的地址低位压入堆栈                                 */
	*Stack--=(INT16U)Task>>8;		 	     /*将任务的地址高位压入堆栈	                                */
	*Stack--=0x00;							 /*R1 __zero_reg__				                            */
	*Stack--=0x00;							 /*R0 __tmp_reg__			                                */
	*Stack--=0x80;							 /*SREG 在任务中，开启全局中断	                            */
	for(i=0;i<14;i++)
  62:	5f 5f       	subi	r21, 0xFF	; 255
  64:	5e 30       	cpi	r21, 0x0E	; 14
  66:	d9 f7       	brne	.-10     	; 0x5e <OSTaskCreate+0x16>
    *Stack--=i;/*在 avr-libc 中的 FAQ中的 What registers are used by the C compiler?描述了寄存器的作用	*/
	TCB[prio].OSTaskStackTop = (INT16U)Stack;/*将人工堆栈的栈顶，保存到堆栈的数组中                     */
  68:	24 2f       	mov	r18, r20
  6a:	30 e0       	ldi	r19, 0x00	; 0
  6c:	f9 01       	movw	r30, r18
  6e:	ee 0f       	add	r30, r30
  70:	ff 1f       	adc	r31, r31
  72:	ee 0f       	add	r30, r30
  74:	ff 1f       	adc	r31, r31
  76:	ec 59       	subi	r30, 0x9C	; 156
  78:	ff 4f       	sbci	r31, 0xFF	; 255
  7a:	0e 97       	sbiw	r24, 0x0e	; 14
  7c:	91 83       	std	Z+1, r25	; 0x01
  7e:	80 83       	st	Z, r24
    TCB[prio].OSWaitTick     = 0;			 /* 初始化任务延时    	                                    */
  80:	f9 01       	movw	r30, r18
  82:	ee 0f       	add	r30, r30
  84:	ff 1f       	adc	r31, r31
  86:	ee 0f       	add	r30, r30
  88:	ff 1f       	adc	r31, r31
  8a:	ea 59       	subi	r30, 0x9A	; 154
  8c:	ff 4f       	sbci	r31, 0xFF	; 255
  8e:	11 82       	std	Z+1, r1	; 0x01
  90:	10 82       	st	Z, r1
	OSRdyTbl                |= 0x01<<prio;   /*任务就绪表已经准备好		      	                        */
  92:	81 e0       	ldi	r24, 0x01	; 1
  94:	90 e0       	ldi	r25, 0x00	; 0
  96:	02 c0       	rjmp	.+4      	; 0x9c <OSTaskCreate+0x54>
  98:	88 0f       	add	r24, r24
  9a:	99 1f       	adc	r25, r25
  9c:	2a 95       	dec	r18
  9e:	e2 f7       	brpl	.-8      	; 0x98 <OSTaskCreate+0x50>
  a0:	28 2a       	or	r2, r24
}
  a2:	08 95       	ret

000000a4 <OSInit>:
函数原型：	void OSInit (void)
函数功能：	用户函数，初始化任务时钟和一些系统全局变量，建立空闲任务	
*********************************************************************************************************/
void OSInit (void)
{
	OSRdyTbl      = 0;                            /*任务就绪表清零                                      */
  a4:	22 24       	eor	r2, r2
	OSIntNesting  = 0;	                          /*中断嵌套计数器清零                                  */
  a6:	44 24       	eor	r4, r4
	OSLockNesting = 0;
  a8:	66 24       	eor	r6, r6
	OSIdleCtr     = 0;
  aa:	10 92 60 00 	sts	0x0060, r1
  ae:	10 92 61 00 	sts	0x0061, r1
  b2:	10 92 62 00 	sts	0x0062, r1
  b6:	10 92 63 00 	sts	0x0063, r1
#if OS_CPU_HOOKS_EN > 0
    OSInitHookBegin ();
#endif
	OSTaskCreate(IdleTask,&IdleStack[IDLE_STACK_SIZE-1],IDLE_TASK_PRIO); /*建立IDLE任务                 */
  ba:	8e e1       	ldi	r24, 0x1E	; 30
  bc:	91 e0       	ldi	r25, 0x01	; 1
  be:	63 e9       	ldi	r22, 0x93	; 147
  c0:	70 e0       	ldi	r23, 0x00	; 0
  c2:	43 e0       	ldi	r20, 0x03	; 3
  c4:	c1 df       	rcall	.-126    	; 0x48 <OSTaskCreate>
}
  c6:	08 95       	ret

000000c8 <OSStart>:
函数原型：	void OSStart(void)
函数功能：	用户函数，开始任务调度,从空闲任务开始运行 	
*********************************************************************************************************/
void OSStart(void)
{
	OSPrioCur     = OS_TASKS;
  c8:	63 e0       	ldi	r22, 0x03	; 3
  ca:	36 2e       	mov	r3, r22
	OSPrioHighRdy = OS_TASKS;
  cc:	53 e0       	ldi	r21, 0x03	; 3
  ce:	55 2e       	mov	r5, r21
	SP=TCB[OS_TASKS].OSTaskStackTop+17;
  d0:	80 91 70 00 	lds	r24, 0x0070
  d4:	90 91 71 00 	lds	r25, 0x0071
  d8:	41 96       	adiw	r24, 0x11	; 17
  da:	9e bf       	out	0x3e, r25	; 62
  dc:	8d bf       	out	0x3d, r24	; 61
	__asm__ __volatile__("reti"                    "\n\t");
  de:	18 95       	reti
}
  e0:	08 95       	ret

000000e2 <OS_TASK_SW>:
函数功能：	进行任务调度 
有关说明：	内部函数，中断和任务都可以调用这个任务调度函数	
*********************************************************************************************************/
void OS_TASK_SW(void)
{
	__asm__ __volatile__("PUSH __zero_reg__         \n\t");	/*R1 					                    */
  e2:	1f 92       	push	r1
	__asm__ __volatile__("PUSH __tmp_reg__          \n\t");	/*R0					                    */
  e4:	0f 92       	push	r0
	__asm__ __volatile__("IN   __tmp_reg__,__SREG__ \n\t");	/*保存状态寄存器SREG               	        */
  e6:	0f b6       	in	r0, 0x3f	; 63
	__asm__ __volatile__("PUSH __tmp_reg__          \n\t"); 
  e8:	0f 92       	push	r0
	__asm__ __volatile__("CLR  __zero_reg__         \n\t");	/*R0重新清零			                    */
  ea:	11 24       	eor	r1, r1
	__asm__ __volatile__("PUSH R18                  \n\t");
  ec:	2f 93       	push	r18
	__asm__ __volatile__("PUSH R19                  \n\t");
  ee:	3f 93       	push	r19
	__asm__ __volatile__("PUSH R20                  \n\t");
  f0:	4f 93       	push	r20
	__asm__ __volatile__("PUSH R21                  \n\t");
  f2:	5f 93       	push	r21
	__asm__ __volatile__("PUSH R22                  \n\t");
  f4:	6f 93       	push	r22
	__asm__ __volatile__("PUSH R23                  \n\t");
  f6:	7f 93       	push	r23
	__asm__ __volatile__("PUSH R24                  \n\t");
  f8:	8f 93       	push	r24
	__asm__ __volatile__("PUSH R25                  \n\t");
  fa:	9f 93       	push	r25
	__asm__ __volatile__("PUSH R26                  \n\t");
  fc:	af 93       	push	r26
	__asm__ __volatile__("PUSH R27                  \n\t");
  fe:	bf 93       	push	r27
	__asm__ __volatile__("PUSH R30                  \n\t");  
 100:	ef 93       	push	r30
	__asm__ __volatile__("PUSH R31                  \n\t");	
 102:	ff 93       	push	r31

00000104 <Int_OSSched>:

	__asm__ __volatile__("Int_OSSched:              \n\t");	/*当中断要求调度，直接进入这里		        */ 
    __asm__ __volatile__("CLI                       \n\t");                
 104:	f8 94       	cli
	__asm__ __volatile__("PUSH R28                  \n\t");	/*R28与R29用于建立在堆栈上的指针	        */
 106:	cf 93       	push	r28
	__asm__ __volatile__("PUSH R29                  \n\t");	/*入栈完成							        */	
 108:	df 93       	push	r29
	
	TCB[OSPrioCur].OSTaskStackTop=SP;					    /*将正在运行的任务的堆栈底保存		        */	
 10a:	8d b7       	in	r24, 0x3d	; 61
 10c:	9e b7       	in	r25, 0x3e	; 62
 10e:	e3 2d       	mov	r30, r3
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	a4 e6       	ldi	r26, 0x64	; 100
 114:	b0 e0       	ldi	r27, 0x00	; 0
 116:	ee 0f       	add	r30, r30
 118:	ff 1f       	adc	r31, r31
 11a:	ee 0f       	add	r30, r30
 11c:	ff 1f       	adc	r31, r31
 11e:	ea 0f       	add	r30, r26
 120:	fb 1f       	adc	r31, r27
 122:	91 83       	std	Z+1, r25	; 0x01
 124:	80 83       	st	Z, r24
	OSPrioCur = OSPrioHighRdy ;							    /*运行当前就绪表中的最高优先级任务	        */	
 126:	85 2d       	mov	r24, r5
 128:	35 2c       	mov	r3, r5
	SP=TCB[OSPrioCur].OSTaskStackTop;
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	88 0f       	add	r24, r24
 12e:	99 1f       	adc	r25, r25
 130:	88 0f       	add	r24, r24
 132:	99 1f       	adc	r25, r25
 134:	a8 0f       	add	r26, r24
 136:	b9 1f       	adc	r27, r25
 138:	8d 91       	ld	r24, X+
 13a:	9c 91       	ld	r25, X
 13c:	9e bf       	out	0x3e, r25	; 62
 13e:	8d bf       	out	0x3d, r24	; 61

	__asm__ __volatile__("POP  R29                  \n\t"); /*出栈                                      */
 140:	df 91       	pop	r29
	__asm__ __volatile__("POP  R28                  \n\t");
 142:	cf 91       	pop	r28
	__asm__ __volatile__("POP  R31                  \n\t");
 144:	ff 91       	pop	r31
	__asm__ __volatile__("POP  R30                  \n\t");
 146:	ef 91       	pop	r30
	__asm__ __volatile__("POP  R27                  \n\t");
 148:	bf 91       	pop	r27
	__asm__ __volatile__("POP  R26                  \n\t");
 14a:	af 91       	pop	r26
	__asm__ __volatile__("POP  R25                  \n\t");
 14c:	9f 91       	pop	r25
	__asm__ __volatile__("POP  R24                  \n\t");
 14e:	8f 91       	pop	r24
	__asm__ __volatile__("POP  R23                  \n\t");
 150:	7f 91       	pop	r23
	__asm__ __volatile__("POP  R22                  \n\t");
 152:	6f 91       	pop	r22
	__asm__ __volatile__("POP  R21                  \n\t");
 154:	5f 91       	pop	r21
	__asm__ __volatile__("POP  R20                  \n\t");
 156:	4f 91       	pop	r20
	__asm__ __volatile__("POP  R19                  \n\t");
 158:	3f 91       	pop	r19
	__asm__ __volatile__("POP  R18                  \n\t");
 15a:	2f 91       	pop	r18
	__asm__ __volatile__("POP  __tmp_reg__          \n\t"); /*SERG 出栈并恢复	                        */
 15c:	0f 90       	pop	r0
	__asm__ __volatile__("OUT  __SREG__,__tmp_reg__ \n\t");
 15e:	0f be       	out	0x3f, r0	; 63
	__asm__ __volatile__("POP  __tmp_reg__          \n\t");	/*R0 出栈			                        */
 160:	0f 90       	pop	r0
	__asm__ __volatile__("POP  __zero_reg__         \n\t");	/*R1 出栈			                        */	                                                      
 162:	1f 90       	pop	r1
	__asm__ __volatile__("RETI                      \n\t"); /*出栈完成,返回并开中断		                */
 164:	18 95       	reti
}
 166:	08 95       	ret

00000168 <OSIntCtxSw>:
有关说明：	当无中断嵌套并且中断中要求进行任务切换时才进行任务切换。
			因为从中断到运行下一个任务共调用了两次子函数，所以要弹出四个入栈的PC
*********************************************************************************************************/
void OSIntCtxSw(void)
{                                
	__asm__ __volatile__("POP  R31                  \n\t");	    /*去除因调用子程序而入栈的PC            */
 168:	ff 91       	pop	r31
	__asm__ __volatile__("POP  R31                  \n\t");
 16a:	ff 91       	pop	r31
	__asm__ __volatile__("POP  R31                  \n\t");
 16c:	ff 91       	pop	r31
	__asm__ __volatile__("POP  R31                  \n\t");
 16e:	ff 91       	pop	r31
	__asm__ __volatile__("RJMP Int_OSSched          \n\t");	    /*重新调度					            */	
 170:	c9 cf       	rjmp	.-110    	; 0x104 <Int_OSSched>
}
 172:	08 95       	ret

00000174 <OS_SchedNew>:
*********************************************************************************************************/
void OS_SchedNew (void)
{   
	INT8U OSNextTaskPrio;
	OSNextTaskPrio = 0;
	while ((OSNextTaskPrio < OS_TASKS) && (!(OSRdyTbl & (0x01<<OSNextTaskPrio)))){
 174:	20 fe       	sbrs	r2, 0
 176:	02 c0       	rjmp	.+4      	; 0x17c <OS_SchedNew+0x8>
 178:	80 e0       	ldi	r24, 0x00	; 0
 17a:	09 c0       	rjmp	.+18     	; 0x18e <OS_SchedNew+0x1a>
 17c:	21 fe       	sbrs	r2, 1
 17e:	02 c0       	rjmp	.+4      	; 0x184 <OS_SchedNew+0x10>
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	05 c0       	rjmp	.+10     	; 0x18e <OS_SchedNew+0x1a>
 184:	22 fc       	sbrc	r2, 2
 186:	02 c0       	rjmp	.+4      	; 0x18c <OS_SchedNew+0x18>
 188:	83 e0       	ldi	r24, 0x03	; 3
 18a:	01 c0       	rjmp	.+2      	; 0x18e <OS_SchedNew+0x1a>
 18c:	82 e0       	ldi	r24, 0x02	; 2
		OSNextTaskPrio++;                                 /*找出信号量等待列表中任务优先级最高的任务    */
	}
	OSPrioHighRdy  =  OSNextTaskPrio;
 18e:	58 2e       	mov	r5, r24
}
 190:	08 95       	ret

00000192 <OS_Sched>:
函数功能：	任务调度器，进行任务调度
有关说明：	内部函数，只有有更高优先级的任务就绪时才进行一次任务切换，否则不做切换，中断中不可调用此函数	
*********************************************************************************************************/
void OS_Sched (void)
{
    OS_ENTER_CRITICAL();
 192:	0f b6       	in	r0, 0x3f	; 63
 194:	0f 92       	push	r0
 196:	11 24       	eor	r1, r1
 198:	f8 94       	cli
	if(OSIntNesting == 0){                                 /*判断是否由中断调用，是则直接推出           */   	
 19a:	44 20       	and	r4, r4
 19c:	29 f4       	brne	.+10     	; 0x1a8 <OS_Sched+0x16>
	    if(OSLockNesting == 0){                            /*判断调度是否上锁，是则直接推出             */
 19e:	66 20       	and	r6, r6
 1a0:	19 f4       	brne	.+6      	; 0x1a8 <OS_Sched+0x16>
		    OS_SchedNew();						           /*找出就绪表中优先级最高的任务               */
 1a2:	e8 df       	rcall	.-48     	; 0x174 <OS_SchedNew>
	        if(OSPrioHighRdy != OSPrioCur){				   /*如果不是当前运行的任务，进行任务调度       */	    
 1a4:	53 10       	cpse	r5, r3
		        OS_TASK_SW();							   /*调度任务                                   */    
 1a6:	9d df       	rcall	.-198    	; 0xe2 <OS_TASK_SW>
		    }
		}
    }
	OS_EXIT_CRITICAL();
 1a8:	0f 90       	pop	r0
 1aa:	0f be       	out	0x3f, r0	; 63
 1ac:	11 24       	eor	r1, r1
}
 1ae:	08 95       	ret

000001b0 <OSTaskResume>:
入口参数：	prio：任务优先级	
*********************************************************************************************************/
#if OS_TASK_RESUME_EN > 0
void OSTaskResume(INT8U prio)
{
	OS_ENTER_CRITICAL();
 1b0:	0f b6       	in	r0, 0x3f	; 63
 1b2:	0f 92       	push	r0
 1b4:	11 24       	eor	r1, r1
 1b6:	f8 94       	cli
	OSRdyTbl |= 0x01<<prio;			                       /*从任务就绪表上重置标志位	                */
 1b8:	e8 2f       	mov	r30, r24
 1ba:	f0 e0       	ldi	r31, 0x00	; 0
 1bc:	21 e0       	ldi	r18, 0x01	; 1
 1be:	30 e0       	ldi	r19, 0x00	; 0
 1c0:	08 2e       	mov	r0, r24
 1c2:	02 c0       	rjmp	.+4      	; 0x1c8 <OSTaskResume+0x18>
 1c4:	22 0f       	add	r18, r18
 1c6:	33 1f       	adc	r19, r19
 1c8:	0a 94       	dec	r0
 1ca:	e2 f7       	brpl	.-8      	; 0x1c4 <OSTaskResume+0x14>
 1cc:	22 2a       	or	r2, r18
    TCB[prio].OSWaitTick=0;			                       /*将时间计时设为0,到时		                */
 1ce:	ee 0f       	add	r30, r30
 1d0:	ff 1f       	adc	r31, r31
 1d2:	ee 0f       	add	r30, r30
 1d4:	ff 1f       	adc	r31, r31
 1d6:	ea 59       	subi	r30, 0x9A	; 154
 1d8:	ff 4f       	sbci	r31, 0xFF	; 255
 1da:	11 82       	std	Z+1, r1	; 0x01
 1dc:	10 82       	st	Z, r1
	if(OSPrioCur > prio){			                       /*当前任务的优先级低于重置位的任务的优先级	*/	
 1de:	83 15       	cp	r24, r3
 1e0:	28 f4       	brcc	.+10     	; 0x1ec <OSTaskResume+0x3c>
		OS_EXIT_CRITICAL();
 1e2:	0f 90       	pop	r0
 1e4:	0f be       	out	0x3f, r0	; 63
 1e6:	11 24       	eor	r1, r1
		OS_Sched();					                       /*重新调度				             	    */
 1e8:	d4 df       	rcall	.-88     	; 0x192 <OS_Sched>
 1ea:	08 95       	ret
	    return;
	}
	OS_EXIT_CRITICAL();
 1ec:	0f 90       	pop	r0
 1ee:	0f be       	out	0x3f, r0	; 63
 1f0:	11 24       	eor	r1, r1
 1f2:	08 95       	ret

000001f4 <OSTaskSuspend>:
有关说明：	用户函数，一个任务可以挂起本身也可以挂起其他任务	
*********************************************************************************************************/
#if OS_TASK_SUSPEND_EN >0
void OSTaskSuspend(INT8U prio)
{
	OS_ENTER_CRITICAL();
 1f4:	0f b6       	in	r0, 0x3f	; 63
 1f6:	0f 92       	push	r0
 1f8:	11 24       	eor	r1, r1
 1fa:	f8 94       	cli
	TCB[prio].OSWaitTick=0;         
 1fc:	48 2f       	mov	r20, r24
 1fe:	50 e0       	ldi	r21, 0x00	; 0
 200:	fa 01       	movw	r30, r20
 202:	ee 0f       	add	r30, r30
 204:	ff 1f       	adc	r31, r31
 206:	ee 0f       	add	r30, r30
 208:	ff 1f       	adc	r31, r31
 20a:	ea 59       	subi	r30, 0x9A	; 154
 20c:	ff 4f       	sbci	r31, 0xFF	; 255
 20e:	11 82       	std	Z+1, r1	; 0x01
 210:	10 82       	st	Z, r1
	OSRdyTbl &= ~(0x01<<prio);		                       /*从任务就绪表上去除标志位	                */
 212:	21 e0       	ldi	r18, 0x01	; 1
 214:	30 e0       	ldi	r19, 0x00	; 0
 216:	08 2e       	mov	r0, r24
 218:	02 c0       	rjmp	.+4      	; 0x21e <OSTaskSuspend+0x2a>
 21a:	22 0f       	add	r18, r18
 21c:	33 1f       	adc	r19, r19
 21e:	0a 94       	dec	r0
 220:	e2 f7       	brpl	.-8      	; 0x21a <OSTaskSuspend+0x26>
 222:	20 95       	com	r18
 224:	22 22       	and	r2, r18
	if(OSPrioCur == prio){			                       /*当要挂起的任务为当前任务	                */	
 226:	38 16       	cp	r3, r24
 228:	29 f4       	brne	.+10     	; 0x234 <OSTaskSuspend+0x40>
		OS_EXIT_CRITICAL();
 22a:	0f 90       	pop	r0
 22c:	0f be       	out	0x3f, r0	; 63
 22e:	11 24       	eor	r1, r1
		OS_Sched();					                       /*重新调度					                */
 230:	b0 df       	rcall	.-160    	; 0x192 <OS_Sched>
 232:	08 95       	ret
		return;
	}
	OS_EXIT_CRITICAL();
 234:	0f 90       	pop	r0
 236:	0f be       	out	0x3f, r0	; 63
 238:	11 24       	eor	r1, r1
 23a:	08 95       	ret

0000023c <IdleTask>:
函数功能：	初始化定时器0
有关说明：	定时器T0是任务时钟	
*********************************************************************************************************/
void TCN0Init(void)
{
	TCCR0 = 0;
 23c:	13 be       	out	0x33, r1	; 51
	TCCR0 = 0x05;			    /* 1024预分频		*/
 23e:	85 e0       	ldi	r24, 0x05	; 5
 240:	83 bf       	out	0x33, r24	; 51
	TIMSK |= (1<<TOIE0);		/* T0溢出中断允许	*/
 242:	89 b7       	in	r24, 0x39	; 57
 244:	81 60       	ori	r24, 0x01	; 1
 246:	89 bf       	out	0x39, r24	; 57
	TCNT0 = (256-F_CPU/1024/OS_TICKS_PER_SEC);
 248:	84 e6       	ldi	r24, 0x64	; 100
 24a:	82 bf       	out	0x32, r24	; 50
这里将timer0放在此处，因为该函数是第一个运行的函数，模仿UCos在第一个任务中启动系统节拍
*********************************************************************************************************/
void IdleTask(void)
{   
    TCN0Init();                                            /*初始化定时器                               */
	OS_Sched();
 24c:	a2 df       	rcall	.-188    	; 0x192 <OS_Sched>
	for (;;){
    	OS_ENTER_CRITICAL();
 24e:	0f b6       	in	r0, 0x3f	; 63
 250:	0f 92       	push	r0
 252:	11 24       	eor	r1, r1
 254:	f8 94       	cli
        OSIdleCtr++;
 256:	80 91 60 00 	lds	r24, 0x0060
 25a:	90 91 61 00 	lds	r25, 0x0061
 25e:	a0 91 62 00 	lds	r26, 0x0062
 262:	b0 91 63 00 	lds	r27, 0x0063
 266:	01 96       	adiw	r24, 0x01	; 1
 268:	a1 1d       	adc	r26, r1
 26a:	b1 1d       	adc	r27, r1
 26c:	80 93 60 00 	sts	0x0060, r24
 270:	90 93 61 00 	sts	0x0061, r25
 274:	a0 93 62 00 	sts	0x0062, r26
 278:	b0 93 63 00 	sts	0x0063, r27
#if OS_CPU_HOOKS_EN > 0
        OSTaskIdleHook();
#endif
        OS_EXIT_CRITICAL();	
 27c:	0f 90       	pop	r0
 27e:	0f be       	out	0x3f, r0	; 63
 280:	11 24       	eor	r1, r1
 282:	e5 cf       	rjmp	.-54     	; 0x24e <IdleTask+0x12>

00000284 <OSIntEnter>:
函数功能：	进入中断时调用此函数
有关说明：	OSIntEnter()和OSIntExit()要成对出现使用
*********************************************************************************************************/
void OSIntEnter(void)
{
	OS_ENTER_CRITICAL();
 284:	0f b6       	in	r0, 0x3f	; 63
 286:	0f 92       	push	r0
 288:	11 24       	eor	r1, r1
 28a:	f8 94       	cli
	if(OSIntNesting<255u){
 28c:	84 2d       	mov	r24, r4
 28e:	8f 3f       	cpi	r24, 0xFF	; 255
 290:	09 f0       	breq	.+2      	; 0x294 <OSIntEnter+0x10>
		OSIntNesting++;     				             /*中断嵌套加1    			                    */
 292:	43 94       	inc	r4
	}
	OS_EXIT_CRITICAL();
 294:	0f 90       	pop	r0
 296:	0f be       	out	0x3f, r0	; 63
 298:	11 24       	eor	r1, r1
}
 29a:	08 95       	ret

0000029c <OSIntExit>:
函数功能：	从中断中退出时调用此函数，如果中断让更高优先级的任务就绪就进行任务调度
有关说明：	OSIntEnter()和OSIntExit()要成对出现使用	
*********************************************************************************************************/
void OSIntExit(void)
{
	OS_ENTER_CRITICAL();
 29c:	0f b6       	in	r0, 0x3f	; 63
 29e:	0f 92       	push	r0
 2a0:	11 24       	eor	r1, r1
 2a2:	f8 94       	cli
	if(OSIntNesting>0){
 2a4:	41 10       	cpse	r4, r1
		OSIntNesting--;     				             /*中断嵌套减1			                        */
 2a6:	4a 94       	dec	r4
	}
	if(OSIntNesting == 0){
 2a8:	44 20       	and	r4, r4
 2aa:	71 f4       	brne	.+28     	; 0x2c8 <OSIntExit+0x2c>
	    if(OSLockNesting == 0){
 2ac:	66 20       	and	r6, r6
 2ae:	61 f4       	brne	.+24     	; 0x2c8 <OSIntExit+0x2c>
		    OS_SchedNew();				                 /*找出就绪表中优先级最高的任务                 */
 2b0:	61 df       	rcall	.-318    	; 0x174 <OS_SchedNew>
		    if(OSPrioHighRdy != OSPrioCur){	
 2b2:	53 14       	cp	r5, r3
 2b4:	49 f0       	breq	.+18     	; 0x2c8 <OSIntExit+0x2c>
			    OS_EXIT_CRITICAL();	   	
 2b6:	0f 90       	pop	r0
 2b8:	0f be       	out	0x3f, r0	; 63
 2ba:	11 24       	eor	r1, r1
有关说明：	当无中断嵌套并且中断中要求进行任务切换时才进行任务切换。
			因为从中断到运行下一个任务共调用了两次子函数，所以要弹出四个入栈的PC
*********************************************************************************************************/
void OSIntCtxSw(void)
{                                
	__asm__ __volatile__("POP  R31                  \n\t");	    /*去除因调用子程序而入栈的PC            */
 2bc:	ff 91       	pop	r31
	__asm__ __volatile__("POP  R31                  \n\t");
 2be:	ff 91       	pop	r31
	__asm__ __volatile__("POP  R31                  \n\t");
 2c0:	ff 91       	pop	r31
	__asm__ __volatile__("POP  R31                  \n\t");
 2c2:	ff 91       	pop	r31
	__asm__ __volatile__("RJMP Int_OSSched          \n\t");	    /*重新调度					            */	
 2c4:	1f cf       	rjmp	.-450    	; 0x104 <Int_OSSched>
 2c6:	08 95       	ret
			    OSIntCtxSw();					        /*进行任务调度            	                    */	
		        return;
		    }
	    }
	}
	OS_EXIT_CRITICAL();
 2c8:	0f 90       	pop	r0
 2ca:	0f be       	out	0x3f, r0	; 63
 2cc:	11 24       	eor	r1, r1
 2ce:	08 95       	ret

000002d0 <OSTimeTick>:
{
	INT8U i;
#if OS_CPU_HOOKS_EN > 0
    OSTimeTickHook ();
#endif
	OS_ENTER_CRITICAL();
 2d0:	0f b6       	in	r0, 0x3f	; 63
 2d2:	0f 92       	push	r0
 2d4:	11 24       	eor	r1, r1
 2d6:	f8 94       	cli
 2d8:	42 2d       	mov	r20, r2
 2da:	e6 e6       	ldi	r30, 0x66	; 102
 2dc:	f0 e0       	ldi	r31, 0x00	; 0
 2de:	20 e0       	ldi	r18, 0x00	; 0
 2e0:	30 e0       	ldi	r19, 0x00	; 0
	for(i=0;i < OS_TASKS;i++){				             /*刷新各任务时钟	        	                */	
		 if(TCB[i].OSWaitTick){
			 TCB[i].OSWaitTick--;
			 if(TCB[i].OSWaitTick == 0){		         /*当任务时钟到时,必须是由定时器减时的才行      */			
				 OSRdyTbl |= (0x01<<i);		             /*将延时到的程序就需表置位	                    */				
 2e2:	61 e0       	ldi	r22, 0x01	; 1
 2e4:	70 e0       	ldi	r23, 0x00	; 0
#if OS_CPU_HOOKS_EN > 0
    OSTimeTickHook ();
#endif
	OS_ENTER_CRITICAL();
	for(i=0;i < OS_TASKS;i++){				             /*刷新各任务时钟	        	                */	
		 if(TCB[i].OSWaitTick){
 2e6:	80 81       	ld	r24, Z
 2e8:	91 81       	ldd	r25, Z+1	; 0x01
 2ea:	00 97       	sbiw	r24, 0x00	; 0
 2ec:	69 f0       	breq	.+26     	; 0x308 <OSTimeTick+0x38>
			 TCB[i].OSWaitTick--;
 2ee:	01 97       	sbiw	r24, 0x01	; 1
 2f0:	91 83       	std	Z+1, r25	; 0x01
 2f2:	80 83       	st	Z, r24
			 if(TCB[i].OSWaitTick == 0){		         /*当任务时钟到时,必须是由定时器减时的才行      */			
 2f4:	89 2b       	or	r24, r25
 2f6:	41 f4       	brne	.+16     	; 0x308 <OSTimeTick+0x38>
				 OSRdyTbl |= (0x01<<i);		             /*将延时到的程序就需表置位	                    */				
 2f8:	cb 01       	movw	r24, r22
 2fa:	02 2e       	mov	r0, r18
 2fc:	02 c0       	rjmp	.+4      	; 0x302 <OSTimeTick+0x32>
 2fe:	88 0f       	add	r24, r24
 300:	99 1f       	adc	r25, r25
 302:	0a 94       	dec	r0
 304:	e2 f7       	brpl	.-8      	; 0x2fe <OSTimeTick+0x2e>
 306:	48 2b       	or	r20, r24
 308:	2f 5f       	subi	r18, 0xFF	; 255
 30a:	3f 4f       	sbci	r19, 0xFF	; 255
 30c:	34 96       	adiw	r30, 0x04	; 4
	INT8U i;
#if OS_CPU_HOOKS_EN > 0
    OSTimeTickHook ();
#endif
	OS_ENTER_CRITICAL();
	for(i=0;i < OS_TASKS;i++){				             /*刷新各任务时钟	        	                */	
 30e:	23 30       	cpi	r18, 0x03	; 3
 310:	31 05       	cpc	r19, r1
 312:	49 f7       	brne	.-46     	; 0x2e6 <OSTimeTick+0x16>
 314:	24 2e       	mov	r2, r20
			 if(TCB[i].OSWaitTick == 0){		         /*当任务时钟到时,必须是由定时器减时的才行      */			
				 OSRdyTbl |= (0x01<<i);		             /*将延时到的程序就需表置位	                    */				
			 }
		 }
	}
	OS_EXIT_CRITICAL();
 316:	0f 90       	pop	r0
 318:	0f be       	out	0x3f, r0	; 63
 31a:	11 24       	eor	r1, r1
}
 31c:	08 95       	ret

0000031e <OSTimeDly>:
函数功能：	任务延时 
入口参数：	延时的时间，系统节拍的个数
有关说明：		
*********************************************************************************************************/
void OSTimeDly(INT16U ticks)
{
 31e:	9c 01       	movw	r18, r24
    if(OSIntNesting > 0){                               /*中断 不得调用                                 */
 320:	44 20       	and	r4, r4
 322:	e9 f4       	brne	.+58     	; 0x35e <OSTimeDly+0x40>
       return;
    }         
    if(ticks){                             	            /*当延时有效                                    */	
 324:	00 97       	sbiw	r24, 0x00	; 0
 326:	d9 f0       	breq	.+54     	; 0x35e <OSTimeDly+0x40>
	   OS_ENTER_CRITICAL();
 328:	0f b6       	in	r0, 0x3f	; 63
 32a:	0f 92       	push	r0
 32c:	11 24       	eor	r1, r1
 32e:	f8 94       	cli
	   OSRdyTbl &= ~(0x01<<OSPrioCur);	                /*把任务从就绪表中去掉                          */
 330:	e3 2d       	mov	r30, r3
 332:	f0 e0       	ldi	r31, 0x00	; 0
 334:	81 e0       	ldi	r24, 0x01	; 1
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	02 c0       	rjmp	.+4      	; 0x33e <OSTimeDly+0x20>
 33a:	88 0f       	add	r24, r24
 33c:	99 1f       	adc	r25, r25
 33e:	3a 94       	dec	r3
 340:	e2 f7       	brpl	.-8      	; 0x33a <OSTimeDly+0x1c>
 342:	80 95       	com	r24
 344:	28 22       	and	r2, r24
	   TCB[OSPrioCur].OSWaitTick=ticks;
 346:	ee 0f       	add	r30, r30
 348:	ff 1f       	adc	r31, r31
 34a:	ee 0f       	add	r30, r30
 34c:	ff 1f       	adc	r31, r31
 34e:	ea 59       	subi	r30, 0x9A	; 154
 350:	ff 4f       	sbci	r31, 0xFF	; 255
 352:	31 83       	std	Z+1, r19	; 0x01
 354:	20 83       	st	Z, r18
	   OS_EXIT_CRITICAL();
 356:	0f 90       	pop	r0
 358:	0f be       	out	0x3f, r0	; 63
 35a:	11 24       	eor	r1, r1
	   OS_Sched();                                       /*重新调度	                                    */
 35c:	1a df       	rcall	.-460    	; 0x192 <OS_Sched>
 35e:	08 95       	ret

00000360 <OSSemCreate>:
函数功能：	初始化信号量 
入口参数：	pevent：信号量指针；cnt：信号量初值	    
*********************************************************************************************************/
#if OS_SEM_CREATE_EN >0
INT8U OSSemCreate(OS_SEM *pevent,INT8U cnt)
{
 360:	fc 01       	movw	r30, r24
	pevent->OSSemCnt=cnt;                               /*定义信号计数器初值                            */
 362:	60 83       	st	Z, r22
	pevent->OSSemPendTbl=0;
 364:	11 82       	std	Z+1, r1	; 0x01
	return OS_ERR_NONE;				
}
 366:	80 e0       	ldi	r24, 0x00	; 0
 368:	08 95       	ret

0000036a <OSSemPend>:
出口参数：	无
有关说明：	当Timeout==0时，为无限等待	 该函数不能在中断程序中使用
*********************************************************************************************************/
#if OS_SEM_PEND_EN >0
void  OSSemPend (OS_SEM *pevent, INT16U timeout, INT8U *perr)
{
 36a:	ef 92       	push	r14
 36c:	ff 92       	push	r15
 36e:	0f 93       	push	r16
 370:	1f 93       	push	r17
 372:	cf 93       	push	r28
 374:	df 93       	push	r29
 376:	8c 01       	movw	r16, r24
 378:	7a 01       	movw	r14, r20
    if(OSIntNesting>0){                                 /* 检查是否被中断调用                           */
 37a:	44 20       	and	r4, r4
 37c:	21 f0       	breq	.+8      	; 0x386 <OSSemPend+0x1c>
        *perr = OS_ERR_PEND_ISR;                        
 37e:	87 e0       	ldi	r24, 0x07	; 7
 380:	da 01       	movw	r26, r20
 382:	8c 93       	st	X, r24
 384:	6a c0       	rjmp	.+212    	; 0x45a <OSSemPend+0xf0>
        return;
    }
    if(OSLockNesting>0){                                /* 检查调度是否被锁定                           */
 386:	66 20       	and	r6, r6
 388:	11 f0       	breq	.+4      	; 0x38e <OSSemPend+0x24>
        *perr = OS_ERR_PEND_LOCKED;                     
 38a:	86 e0       	ldi	r24, 0x06	; 6
 38c:	64 c0       	rjmp	.+200    	; 0x456 <OSSemPend+0xec>
        return;
    }
    OS_ENTER_CRITICAL();
 38e:	0f b6       	in	r0, 0x3f	; 63
 390:	0f 92       	push	r0
 392:	11 24       	eor	r1, r1
 394:	f8 94       	cli
	if(pevent->OSSemCnt>0){                              					
 396:	dc 01       	movw	r26, r24
 398:	8c 91       	ld	r24, X
 39a:	88 23       	and	r24, r24
 39c:	31 f0       	breq	.+12     	; 0x3aa <OSSemPend+0x40>
        pevent->OSSemCnt--;				                /*信号量计数器减1                               */		
 39e:	81 50       	subi	r24, 0x01	; 1
 3a0:	8c 93       	st	X, r24
        OS_EXIT_CRITICAL();
 3a2:	0f 90       	pop	r0
 3a4:	0f be       	out	0x3f, r0	; 63
 3a6:	11 24       	eor	r1, r1
 3a8:	2a c0       	rjmp	.+84     	; 0x3fe <OSSemPend+0x94>
		*perr = OS_ERR_NONE;
		return ;       
    }
	pevent->OSSemPendTbl |= 0x01<<OSPrioCur;            /*加入等待列表                                  */
 3aa:	e3 2d       	mov	r30, r3
 3ac:	f0 e0       	ldi	r31, 0x00	; 0
 3ae:	c1 e0       	ldi	r28, 0x01	; 1
 3b0:	d0 e0       	ldi	r29, 0x00	; 0
 3b2:	ce 01       	movw	r24, r28
 3b4:	03 2c       	mov	r0, r3
 3b6:	02 c0       	rjmp	.+4      	; 0x3bc <OSSemPend+0x52>
 3b8:	88 0f       	add	r24, r24
 3ba:	99 1f       	adc	r25, r25
 3bc:	0a 94       	dec	r0
 3be:	e2 f7       	brpl	.-8      	; 0x3b8 <OSSemPend+0x4e>
 3c0:	d8 01       	movw	r26, r16
 3c2:	11 96       	adiw	r26, 0x01	; 1
 3c4:	2c 91       	ld	r18, X
 3c6:	11 97       	sbiw	r26, 0x01	; 1
 3c8:	28 2b       	or	r18, r24
 3ca:	11 96       	adiw	r26, 0x01	; 1
 3cc:	2c 93       	st	X, r18
	OSRdyTbl &= ~(0x01<<OSPrioCur);			            /*从任务就绪表中去除	                        */
 3ce:	80 95       	com	r24
 3d0:	28 22       	and	r2, r24
	if(timeout ==0 ){        
 3d2:	61 15       	cp	r22, r1
 3d4:	71 05       	cpc	r23, r1
 3d6:	b1 f4       	brne	.+44     	; 0x404 <OSSemPend+0x9a>
        OS_EXIT_CRITICAL();	                            /*重新调度				                        */
 3d8:	0f 90       	pop	r0
 3da:	0f be       	out	0x3f, r0	; 63
 3dc:	11 24       	eor	r1, r1
		OS_Sched();
 3de:	d9 de       	rcall	.-590    	; 0x192 <OS_Sched>
	    pevent->OSSemPendTbl &= ~(0x01<<OSPrioCur);
 3e0:	03 2c       	mov	r0, r3
 3e2:	02 c0       	rjmp	.+4      	; 0x3e8 <OSSemPend+0x7e>
 3e4:	cc 0f       	add	r28, r28
 3e6:	dd 1f       	adc	r29, r29
 3e8:	0a 94       	dec	r0
 3ea:	e2 f7       	brpl	.-8      	; 0x3e4 <OSSemPend+0x7a>
 3ec:	fe 01       	movw	r30, r28
 3ee:	e0 95       	com	r30
 3f0:	d8 01       	movw	r26, r16
 3f2:	11 96       	adiw	r26, 0x01	; 1
 3f4:	8c 91       	ld	r24, X
 3f6:	11 97       	sbiw	r26, 0x01	; 1
 3f8:	8e 23       	and	r24, r30
 3fa:	11 96       	adiw	r26, 0x01	; 1
 3fc:	8c 93       	st	X, r24
		*perr = OS_ERR_NONE;
 3fe:	f7 01       	movw	r30, r14
 400:	10 82       	st	Z, r1
 402:	2b c0       	rjmp	.+86     	; 0x45a <OSSemPend+0xf0>
		return ;	 
    }
	TCB[OSPrioCur].OSWaitTick = timeout;	            /*定义等待超时	        	                    */
 404:	ee 0f       	add	r30, r30
 406:	ff 1f       	adc	r31, r31
 408:	ee 0f       	add	r30, r30
 40a:	ff 1f       	adc	r31, r31
 40c:	ea 59       	subi	r30, 0x9A	; 154
 40e:	ff 4f       	sbci	r31, 0xFF	; 255
 410:	71 83       	std	Z+1, r23	; 0x01
 412:	60 83       	st	Z, r22
	OS_EXIT_CRITICAL();
 414:	0f 90       	pop	r0
 416:	0f be       	out	0x3f, r0	; 63
 418:	11 24       	eor	r1, r1
	OS_Sched();	
 41a:	bb de       	rcall	.-650    	; 0x192 <OS_Sched>
	if(TCB[OSPrioCur].OSWaitTick == 0){
 41c:	23 2d       	mov	r18, r3
 41e:	30 e0       	ldi	r19, 0x00	; 0
 420:	f9 01       	movw	r30, r18
 422:	ee 0f       	add	r30, r30
 424:	ff 1f       	adc	r31, r31
 426:	ee 0f       	add	r30, r30
 428:	ff 1f       	adc	r31, r31
 42a:	ea 59       	subi	r30, 0x9A	; 154
 42c:	ff 4f       	sbci	r31, 0xFF	; 255
 42e:	80 81       	ld	r24, Z
 430:	91 81       	ldd	r25, Z+1	; 0x01
 432:	89 2b       	or	r24, r25
 434:	91 f4       	brne	.+36     	; 0x45a <OSSemPend+0xf0>
		pevent->OSSemPendTbl &= ~(0x01<<OSPrioCur);
 436:	03 2c       	mov	r0, r3
 438:	02 c0       	rjmp	.+4      	; 0x43e <OSSemPend+0xd4>
 43a:	cc 0f       	add	r28, r28
 43c:	dd 1f       	adc	r29, r29
 43e:	0a 94       	dec	r0
 440:	e2 f7       	brpl	.-8      	; 0x43a <OSSemPend+0xd0>
 442:	9e 01       	movw	r18, r28
 444:	20 95       	com	r18
 446:	d8 01       	movw	r26, r16
 448:	11 96       	adiw	r26, 0x01	; 1
 44a:	9c 91       	ld	r25, X
 44c:	11 97       	sbiw	r26, 0x01	; 1
 44e:	92 23       	and	r25, r18
 450:	11 96       	adiw	r26, 0x01	; 1
 452:	9c 93       	st	X, r25
		*perr = OS_ERR_TIMEOUT;
 454:	81 e0       	ldi	r24, 0x01	; 1
 456:	f7 01       	movw	r30, r14
 458:	80 83       	st	Z, r24
        return ;			 
 	}      
}
 45a:	df 91       	pop	r29
 45c:	cf 91       	pop	r28
 45e:	1f 91       	pop	r17
 460:	0f 91       	pop	r16
 462:	ff 90       	pop	r15
 464:	ef 90       	pop	r14
 466:	08 95       	ret

00000468 <OSSemPost>:
入口参数：	pevent：信号量的指针
有关说明：	如果有任务在等待该信号量则将该任务就绪，没有任务等待则仅仅是把信号量+1	
*********************************************************************************************************/
#if OS_SEM_POST_EN >0
INT8U OSSemPost(OS_SEM *pevent)
{
 468:	fc 01       	movw	r30, r24
    INT8U i;
    OS_ENTER_CRITICAL();
 46a:	0f b6       	in	r0, 0x3f	; 63
 46c:	0f 92       	push	r0
 46e:	11 24       	eor	r1, r1
 470:	f8 94       	cli
    if(pevent->OSSemPendTbl != 0){                    /*如果有任务等待该信号量                         */    	   
 472:	41 81       	ldd	r20, Z+1	; 0x01
 474:	44 23       	and	r20, r20
 476:	81 f0       	breq	.+32     	; 0x498 <OSSemPost+0x30>
	    i=0;
	    while((i<OS_TASKS)&&(!(pevent->OSSemPendTbl&(0x01<<i)))){
 478:	40 ff       	sbrs	r20, 0
 47a:	02 c0       	rjmp	.+4      	; 0x480 <OSSemPost+0x18>
 47c:	30 e0       	ldi	r19, 0x00	; 0
 47e:	1b c0       	rjmp	.+54     	; 0x4b6 <OSSemPost+0x4e>
 480:	41 ff       	sbrs	r20, 1
 482:	02 c0       	rjmp	.+4      	; 0x488 <OSSemPost+0x20>
 484:	31 e0       	ldi	r19, 0x01	; 1
 486:	17 c0       	rjmp	.+46     	; 0x4b6 <OSSemPost+0x4e>
 488:	42 ff       	sbrs	r20, 2
 48a:	06 c0       	rjmp	.+12     	; 0x498 <OSSemPost+0x30>
 48c:	13 c0       	rjmp	.+38     	; 0x4b4 <OSSemPost+0x4c>
	       }
	    if(i<OS_TASKS){							      /*如果有任务需要		     	                    */		   	
		    pevent->OSSemPendTbl &= ~(0x01<<i);	      /*从等待表中去除		                            */
			OSRdyTbl |= 0x01<<i;				      /*任务就绪					                    */
            if(OSPrioCur>i){                          /*如果等待该信号的任务优先级大于当前任务          */	     
			    OS_EXIT_CRITICAL(); 
 48e:	0f 90       	pop	r0
 490:	0f be       	out	0x3f, r0	; 63
 492:	11 24       	eor	r1, r1
                OS_Sched();                            /*重新调度                                        */
 494:	7e de       	rcall	.-772    	; 0x192 <OS_Sched>
 496:	0c c0       	rjmp	.+24     	; 0x4b0 <OSSemPost+0x48>
                return (OS_ERR_NONE);
			}			
	    }     
	}
    if(pevent->OSSemCnt<255u){
 498:	80 81       	ld	r24, Z
 49a:	8f 3f       	cpi	r24, 0xFF	; 255
 49c:	31 f0       	breq	.+12     	; 0x4aa <OSSemPost+0x42>
	    pevent->OSSemCnt++;				               /*使信号量计数器加1			          	        */
 49e:	8f 5f       	subi	r24, 0xFF	; 255
 4a0:	80 83       	st	Z, r24
	    OS_EXIT_CRITICAL();
 4a2:	0f 90       	pop	r0
 4a4:	0f be       	out	0x3f, r0	; 63
 4a6:	11 24       	eor	r1, r1
 4a8:	03 c0       	rjmp	.+6      	; 0x4b0 <OSSemPost+0x48>
	    return (OS_ERR_NONE);
    }
	OS_EXIT_CRITICAL();
 4aa:	0f 90       	pop	r0
 4ac:	0f be       	out	0x3f, r0	; 63
 4ae:	11 24       	eor	r1, r1
	return (OS_ERR_NONE);
}
 4b0:	80 e0       	ldi	r24, 0x00	; 0
 4b2:	08 95       	ret
    if(pevent->OSSemCnt<255u){
	    pevent->OSSemCnt++;				               /*使信号量计数器加1			          	        */
	    OS_EXIT_CRITICAL();
	    return (OS_ERR_NONE);
    }
	OS_EXIT_CRITICAL();
 4b4:	32 e0       	ldi	r19, 0x02	; 2
	    i=0;
	    while((i<OS_TASKS)&&(!(pevent->OSSemPendTbl&(0x01<<i)))){
		 	    i++;                                  /*找出信号量等待列表中任务优先级最高的任务        */
	       }
	    if(i<OS_TASKS){							      /*如果有任务需要		     	                    */		   	
		    pevent->OSSemPendTbl &= ~(0x01<<i);	      /*从等待表中去除		                            */
 4b6:	81 e0       	ldi	r24, 0x01	; 1
 4b8:	90 e0       	ldi	r25, 0x00	; 0
 4ba:	03 2e       	mov	r0, r19
 4bc:	01 c0       	rjmp	.+2      	; 0x4c0 <OSSemPost+0x58>
 4be:	88 0f       	add	r24, r24
 4c0:	0a 94       	dec	r0
 4c2:	ea f7       	brpl	.-6      	; 0x4be <OSSemPost+0x56>
 4c4:	28 2f       	mov	r18, r24
 4c6:	20 95       	com	r18
 4c8:	24 23       	and	r18, r20
 4ca:	21 83       	std	Z+1, r18	; 0x01
			OSRdyTbl |= 0x01<<i;				      /*任务就绪					                    */
 4cc:	28 2a       	or	r2, r24
            if(OSPrioCur>i){                          /*如果等待该信号的任务优先级大于当前任务          */	     
 4ce:	33 15       	cp	r19, r3
 4d0:	18 f7       	brcc	.-58     	; 0x498 <OSSemPost+0x30>
 4d2:	dd cf       	rjmp	.-70     	; 0x48e <OSSemPost+0x26>

000004d4 <TCN0Init>:
函数功能：	初始化定时器0
有关说明：	定时器T0是任务时钟	
*********************************************************************************************************/
void TCN0Init(void)
{
	TCCR0 = 0;
 4d4:	13 be       	out	0x33, r1	; 51
	TCCR0 = 0x05;			    /* 1024预分频		*/
 4d6:	85 e0       	ldi	r24, 0x05	; 5
 4d8:	83 bf       	out	0x33, r24	; 51
	TIMSK |= (1<<TOIE0);		/* T0溢出中断允许	*/
 4da:	89 b7       	in	r24, 0x39	; 57
 4dc:	81 60       	ori	r24, 0x01	; 1
 4de:	89 bf       	out	0x39, r24	; 57
	TCNT0 = (256-F_CPU/1024/OS_TICKS_PER_SEC);
 4e0:	84 e6       	ldi	r24, 0x64	; 100
 4e2:	82 bf       	out	0x32, r24	; 50
}
 4e4:	08 95       	ret

000004e6 <__vector_9>:
SIGNAL(SIG_OVERFLOW0)
{    
 4e6:	1f 92       	push	r1
 4e8:	0f 92       	push	r0
 4ea:	0f b6       	in	r0, 0x3f	; 63
 4ec:	0f 92       	push	r0
 4ee:	11 24       	eor	r1, r1
 4f0:	2f 93       	push	r18
 4f2:	3f 93       	push	r19
 4f4:	4f 93       	push	r20
 4f6:	5f 93       	push	r21
 4f8:	6f 93       	push	r22
 4fa:	7f 93       	push	r23
 4fc:	8f 93       	push	r24
 4fe:	9f 93       	push	r25
 500:	af 93       	push	r26
 502:	bf 93       	push	r27
 504:	ef 93       	push	r30
 506:	ff 93       	push	r31
	OSIntEnter();
 508:	bd de       	rcall	.-646    	; 0x284 <OSIntEnter>
    TCNT0 = (256-F_CPU/1024/OS_TICKS_PER_SEC);	
 50a:	84 e6       	ldi	r24, 0x64	; 100
 50c:	82 bf       	out	0x32, r24	; 50
    OSTimeTick();	
 50e:	e0 de       	rcall	.-576    	; 0x2d0 <OSTimeTick>
	OSIntExit();
 510:	c5 de       	rcall	.-630    	; 0x29c <OSIntExit>
}
 512:	ff 91       	pop	r31
 514:	ef 91       	pop	r30
 516:	bf 91       	pop	r27
 518:	af 91       	pop	r26
 51a:	9f 91       	pop	r25
 51c:	8f 91       	pop	r24
 51e:	7f 91       	pop	r23
 520:	6f 91       	pop	r22
 522:	5f 91       	pop	r21
 524:	4f 91       	pop	r20
 526:	3f 91       	pop	r19
 528:	2f 91       	pop	r18
 52a:	0f 90       	pop	r0
 52c:	0f be       	out	0x3f, r0	; 63
 52e:	0f 90       	pop	r0
 530:	1f 90       	pop	r1
 532:	18 95       	reti

00000534 <OSTimeTickHook>:
#if OS_CPU_HOOKS_EN > 0
void  OSTimeTickHook (void){}
 534:	08 95       	ret

00000536 <OSTaskIdleHook>:
void  OSTaskIdleHook (void){}
 536:	08 95       	ret

00000538 <OSInitHookBegin>:
void  OSInitHookBegin (void){}
 538:	08 95       	ret

0000053a <main>:
函数原型：	int main(void)
函数功能：	主函数：	
************************************************************************************************************************/
int main(void)
{
	OSInit();
 53a:	b4 dd       	rcall	.-1176   	; 0xa4 <OSInit>

	OSTaskCreate(Task0,&Stack1[64-1],0);
 53c:	88 ec       	ldi	r24, 0xC8	; 200
 53e:	92 e0       	ldi	r25, 0x02	; 2
 540:	63 e1       	ldi	r22, 0x13	; 19
 542:	71 e0       	ldi	r23, 0x01	; 1
 544:	40 e0       	ldi	r20, 0x00	; 0
 546:	80 dd       	rcall	.-1280   	; 0x48 <OSTaskCreate>
	OSTaskCreate(Task1,&Stack2[64-1],1);
 548:	8e eb       	ldi	r24, 0xBE	; 190
 54a:	92 e0       	ldi	r25, 0x02	; 2
 54c:	63 ef       	ldi	r22, 0xF3	; 243
 54e:	70 e0       	ldi	r23, 0x00	; 0
 550:	41 e0       	ldi	r20, 0x01	; 1
 552:	7a dd       	rcall	.-1292   	; 0x48 <OSTaskCreate>
	OSTaskCreate(Task2,&Stack3[64-1],2);
 554:	84 eb       	ldi	r24, 0xB4	; 180
 556:	92 e0       	ldi	r25, 0x02	; 2
 558:	63 ed       	ldi	r22, 0xD3	; 211
 55a:	70 e0       	ldi	r23, 0x00	; 0
 55c:	42 e0       	ldi	r20, 0x02	; 2
 55e:	74 dd       	rcall	.-1304   	; 0x48 <OSTaskCreate>
	
	OSStart();
 560:	b3 dd       	rcall	.-1178   	; 0xc8 <OSStart>
	return 0;
}
 562:	80 e0       	ldi	r24, 0x00	; 0
 564:	90 e0       	ldi	r25, 0x00	; 0
 566:	08 95       	ret

00000568 <Task2>:
函数原型：	void Task2(void)
函数功能：	任务2	
************************************************************************************************************************/
void Task2(void)
{
    DDRB = 0xff;
 568:	8f ef       	ldi	r24, 0xFF	; 255
 56a:	87 bb       	out	0x17, r24	; 23
	PORTB = 0xff;
 56c:	88 bb       	out	0x18, r24	; 24
	while(1) 
	 
	{   
		PORTB = ~PORTB;  
 56e:	88 b3       	in	r24, 0x18	; 24
 570:	80 95       	com	r24
 572:	88 bb       	out	0x18, r24	; 24
		OSTimeDly(3);
 574:	83 e0       	ldi	r24, 0x03	; 3
 576:	90 e0       	ldi	r25, 0x00	; 0
 578:	d2 de       	rcall	.-604    	; 0x31e <OSTimeDly>
 57a:	f9 cf       	rjmp	.-14     	; 0x56e <Task2+0x6>

0000057c <Task1>:
函数功能：	任务1：	
************************************************************************************************************************/
void Task1(void)
{

	DDRB = 0xff;
 57c:	8f ef       	ldi	r24, 0xFF	; 255
 57e:	87 bb       	out	0x17, r24	; 23
	PORTB = 0xff;
 580:	88 bb       	out	0x18, r24	; 24
	while(1)
	{     	
		PORTB = ~PORTB;
 582:	88 b3       	in	r24, 0x18	; 24
 584:	80 95       	com	r24
 586:	88 bb       	out	0x18, r24	; 24
		OSTimeDly(2);
 588:	82 e0       	ldi	r24, 0x02	; 2
 58a:	90 e0       	ldi	r25, 0x00	; 0
 58c:	c8 de       	rcall	.-624    	; 0x31e <OSTimeDly>
 58e:	f9 cf       	rjmp	.-14     	; 0x582 <Task1+0x6>

00000590 <Task0>:
函数原型：	void Task0(void)
函数功能：	任务0	
************************************************************************************************************************/
void Task0(void)
{
	DDRC = 0xff;
 590:	8f ef       	ldi	r24, 0xFF	; 255
 592:	84 bb       	out	0x14, r24	; 20
	PORTC = 0x00;
 594:	15 ba       	out	0x15, r1	; 21
	
	while(1)
	{	
		PORTC = ~PORTC;
 596:	85 b3       	in	r24, 0x15	; 21
 598:	80 95       	com	r24
 59a:	85 bb       	out	0x15, r24	; 21
		OSTimeDly(1);
 59c:	81 e0       	ldi	r24, 0x01	; 1
 59e:	90 e0       	ldi	r25, 0x00	; 0
 5a0:	be de       	rcall	.-644    	; 0x31e <OSTimeDly>
 5a2:	f9 cf       	rjmp	.-14     	; 0x596 <Task0+0x6>

000005a4 <_exit>:
 5a4:	f8 94       	cli

000005a6 <__stop_program>:
 5a6:	ff cf       	rjmp	.-2      	; 0x5a6 <__stop_program>
